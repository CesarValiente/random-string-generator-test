apply plugin: 'maven-publish'
apply plugin: 'signing'


task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

ext["signing.keyId"] = getPropertyValue("SIGNING_KEY_ID")
ext["signing.password"] = getPropertyValue("SIGNING_PASSWORD")
ext["signing.secretKeyRingFile"] = getPropertyValue("SIGNING-SCRET_FILE")
ext["mavenUser"] = getPropertyValue("MAVEN_USER")
ext["mavenPassword"] = getPropertyValue("MAVEN_PASSWD")

publishing {
    publications {
        CesarMavenTest(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            if (project.plugins.findPlugin("com.android.library")) {
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            } else {
                artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            }
            artifact(androidSourcesJar)

            pom {
                name = PUBLISH_ARTIFACT_ID
                description = 'Library 1 publication'
                url = 'https://github.com/CesarValiente/random-string-generator-test'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'cesar-valiente'
                        name = 'Cesar Valiente'
                        email = 'cesar.valiente@xxxxxxxxx.com'
                    }
                    // Add all other devs here...
                }
                // Version control info - if you're using GitHub, follow the format as seen here
                scm {
                    connection = 'scm:git:github.com/CesarValiente/random-string-generator-test.git'
                    developerConnection = 'scm:git:ssh://github.com/CesarValiente/random-string-generator-test.git'
                    url = 'https://github.com/CesarValiente/random-string-generator-test/tree/main'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    // The repository to publish to, Sonatype/MavenCentral
    repositories {
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "mavencentral"

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}
